locals {
  cwd        = split("/", path.cwd)
  testengine = element(local.cwd, length(local.cwd) - 2)
  testcase   = basename(abspath(path.cwd))
  aws_vpc_site = {
    "metadata": {
      "name": format("%s-%s", var.project_prefix, "aws-vpc-site1"),
      "description": format("generated by %s", local.testengine),
      "disable": false
    },
    "spec": {
      "vpc": {
        "new_vpc": {
          "autogenerate": {},
          "primary_ipv4": "10.0.0.0/22",
          "allocate_ipv6": false
        }
      },
      "ingress_gw": {
        "az_nodes": [
          {
            "aws_az_name": format("%sa", var.aws_region),
            "local_subnet": {
              "subnet_param": {
                "ipv4": "10.0.0.0/24"
              }
            },
            "disk_size": 0
          }
        ],
        "aws_certified_hw": "aws-byol-voltmesh",
        "allowed_vip_port": {
          "disable_allowed_vip_port": {}
        },
        "performance_enhancement_mode": {
          "perf_mode_l7_enhanced": {}
        }
      },
      "aws_cred": {
        "namespace": "system",
        "name": var.f5xc_aws_cred,
        "kind": "cloud_credentials"
      },
      "instance_type": "t3.xlarge",
      "disk_size": 0,
      "aws_region": var.aws_region,
      "ssh_key": var.ssh_public_key,
      "coordinates": {
        "latitude": 51.500153,
        "longitude": -0.126236
      },
      "logs_streaming_disabled": {},
      "site_state": "WAITING_FOR_REGISTRATION",
      "vip_params_per_az": [],
      "tags": {},
      "no_worker_nodes": {},
      "default_blocked_services": {},
      "private_connectivity": {
        "cloud_link": {
          "namespace": "system",
          "name": var.f5xc_aws_cloudlink,
          "kind": "cloud_link"
        },
        "outside": {}
      },
      "offline_survivability_mode": {
        "no_offline_survivability_mode": {}
      },
      "disable_internet_vip": {},
      "egress_gateway_default": {},
      "f5xc_security_group": {},
      "cloud_site_info": {
        "public_ips": [],
        "private_ips": [],
        "subnet_ids": [],
        "vpc_name": format("ves-vpc-auto-%s-aws-vpc-site1", var.project_prefix)
      }
    }
  }
}

resource "restapi_object" "aws_vpc_site" {
  id_attribute = "metadata/name"
  path         = "/config/namespaces/system/aws_vpc_sites"
  data         = jsonencode(local.aws_vpc_site)
}

resource "volterra_tf_params_action" "aws_vpc_action" {
  depends_on     = [restapi_object.aws_vpc_site]
  action          = "apply"
  site_name       = format("%s-%s", var.project_prefix, "aws-vpc-site1")
  site_kind       = "aws_vpc_site"
  wait_for_action = true
}

module "site_wait_for_online" {
  depends_on     = [volterra_tf_params_action.aws_vpc_action]
  source         = "../modules/f5xc/status/site"
  f5xc_api_token = var.f5xc_api_token
  f5xc_api_url   = var.f5xc_api_url
  f5xc_namespace = "system"
  f5xc_site_name = format("%s-%s", var.project_prefix, "aws-vpc-site1")
  f5xc_tenant    = var.f5xc_tenant
  is_sensitive   = false
}

output "aws-vpc-site" {
  value = restapi_object.aws_vpc_site[*]
}

